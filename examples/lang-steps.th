#definitions

there is apple;
apple is red;

(isRed) : {apple is? red}
'Red: ' + isRed @print;

is pear;
apple is pear;

(?isPear) : {apple is? pear}
'Pear: ' + isPear @print;

apple is! pear;

'Pear: ' + isPear @print;

a is {
    apple is red
}

b is {
    pear is yellow
}

a; b; #calls

color is {
    @el is red
}

plum color;

wrap is {
    @el is @color #connect to parameter
    @el @next (@fruit) @fruit
}

car wrap (@color @next @fruit) black {@el is @fruit} banana;


print is {
    @1 is? @2 @print
} #no named parameters

print apple red;

'hello' + ' world' @print;
'hello' - 'l' @print;
'hello' / 'l' @print;

h is 'hello';
'H is ' + h @print;
(w) : { h with ' world'};
'W is ' + w @print;
(y) : { w without 'o'};
'Y is ' + y @print;


2 + 3 @print;
5 - 1 @print;
8 / 2 @print;

d is 2;
'D is ' + d @print;
(s) : { d with 8};
'S is ' + s @print;
(t) : { s without 2};
'T is ' + t @print;

'Where is my money?' _ {place is @el}
'How much money?' _ {amount is @el}

place @print;
amount @print;

@print;